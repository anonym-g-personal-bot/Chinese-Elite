# .github/workflows/pr_auto_merger.yml

name: 自动验证并合并数据类 PR (Auto-Validate and Merge Data PRs)

env:
  # 合并任务执行间隔 (分钟)，注意：此参数仅供参考，实际调度由下面的 cron 表达式决定
  MERGE_INTERVAL_MINUTES: 30

on:
  schedule:
    # UTC 时间，每天的 1:00 到 16:59，每 30 分钟执行一次
    - cron: '*/30 1-16 * * *'
  workflow_dispatch:

# 设置并发控制，确保同一时间只有一个合并任务在运行
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-validate-and-merge:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码 (Checkout Code)
        uses: actions/checkout@v4

      - name: 设置 Python (Set up Python)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 安装项目依赖 (Install Dependencies)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 验证并合并 PR (Validate and Merge PRs)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }} 
        run: |
          # --- 开启详细日志模式 ---
          set -x

          echo "开始智能验证流程..."
          merged_count=0
          max_merges=1

          pr_numbers=$(gh pr list --state open --json number --jq '.[].number')
          if [ -z "$pr_numbers" ]; then
            echo "没有待处理的 PR。"
            exit 0
          fi
          
          for pr_number in $pr_numbers; do
            if [ "$merged_count" -ge "$max_merges" ]; then
              echo "已达到本次运行的合并上限 (${max_merges})，流程结束。"
              break
            fi

            echo "--- 正在检查 PR #${pr_number} ---"
            
            files_changed=$(gh pr diff $pr_number --name-only)
            
            echo "PR #${pr_number} 包含以下文件变更:"
            echo "${files_changed}"
            
            # 文件数量是否为1
            file_count=$(echo -n "${files_changed}" | grep -c .)
            echo "文件数量 (file_count): ${file_count}"
            if [ "${file_count}" -ne 1 ]; then
              echo "PR #${pr_number} 修改了多个文件 (${file_count} 个)，已跳过。"
              continue
            fi

            # 文件名是否在白名单内
            # grep -q 表示静默模式，只通过退出码告知结果
            if ! echo "${files_changed}" | grep -qE '^(docs/master_graph_qcode.json|data/LIST.txt)$'; then
              echo "PR #${pr_number} 修改了不允许的文件: ${files_changed}，已跳过。"
              continue
            fi

            echo "文件路径检查通过。正在调用 Python 脚本进行评估..."
            
            # 将 python 命令放在 if 结构中。这样，即使返回 1，bash -e 会正常进入 else 块。
            if python scripts/validate_pr.py $pr_number; then
              exit_code=0 # 如果命令成功 (返回 0), 则 exit_code 为 0
            else
              exit_code=$? # 如果命令失败 (返回非 0), 则捕获这个非 0 的退出码
            fi

            if [ $exit_code -eq 0 ]; then
              echo "✅ 评估结果：有意义。准备合并..."
              gh pr merge $pr_number --auto --squash --delete-branch
              merged_count=$((merged_count + 1))
            elif [ $exit_code -eq 1 ]; then
              echo "❌ 评估结果：无意义。正在关闭 PR 并留言..."
              comment_body="This Pull Request has been automatically closed because our AI reviewer determined the changes to be trivial or not meaningful. If you believe this is an error, please open a new PR with a more detailed explanation."
              gh pr comment $pr_number --body "$comment_body"
              gh pr close $pr_number
            else
              echo "⚠️ 评估脚本执行出错 (退出码: $exit_code)，已跳过此 PR。"
            fi
          done
