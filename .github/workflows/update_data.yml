# .github/workflows/update_data.yml

name: 自动化数据更新 (Automated Data Update)

# --- 触发器 (Triggers) ---
on:
  # 1. 允许手动触发
  workflow_dispatch:

  # 2. 定时触发 (使用 UTC 时间)
  schedule:
    # 每天的 18 点 0 分执行 (UTC 时间)
    - cron: '0 18 * * *'

# --- 权限设置 (Permissions) ---
# 需要写入权限来提交代码
permissions:
  contents: write

# --- 任务 (Jobs) ---
jobs:
  update-data-job:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机

    steps:
      # 第 1 步：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第 2 步：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # 您可以指定需要的 Python 版本

      # 第 3 步：安装依赖项
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第 4 步：运行数据处理流水线
      - name: Run data processing pipeline
        # 将之前设置的 Secret 注入为环境变量
        env:
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python run_pipeline.py

      # 第 5 步：提交并推送更新
      - name: Commit and push all changes
        run: |
          # 配置 Git 用户信息
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # 检查工作区是否有任何变更 (包括新增、修改、删除的文件)
          # The --quiet flag makes git diff exit with 1 if there are changes, 0 if not.
          if ! git diff --quiet; then
            echo "检测到文件变更，正在提交..."
            
            # 添加所有变更的文件 (使用 -A 参数来包含新增、修改和删除)
            git add -A

            # 创建一个更通用的 commit message
            git commit -m "自动化更新 (Automated Update): 同步数据文件" -m "同步本次运行生成或修改的所有数据文件，包括：consolidated_graph.json, new data, processed_files.log, cache, data_to_be_cleaned, etc."
            
            git push
          else
            echo "工作区无变更，无需提交。"
          fi
